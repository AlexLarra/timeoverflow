%h1
  = User.model_name.human.pluralize
  - if params[:q].present?
    %small
      %span.glyphicon.glyphicon-search
      = params[:q]

.navbar
  %form.navbar-form.navbar-left
    %input.form-control{type: "text", placeholder: t("global.search"), "ng-model" => "filterTerm"}
  %ul.nav.navbar-nav.pull-right
    - if admin?
      %li
        %a{href: new_user_path}
          %span.glyphicon.glyphicon-plus
          = t "helpers.submit.create", model: User.model_name.human

%table.table.table-hover.table-condensed.users
  %thead
    %tr
    %tr
      %th
      %th 
        %a{ "ng-click" => "sortBy('id')" }
          ID
          %span.glyphicon.glyphicon-chevron-down{ "ng-if" => "sort == '-id'" }
          %span.glyphicon.glyphicon-chevron-up{ "ng-if" => "sort == 'id'" }
      %th
        %a{ "ng-click" => "sortBy('username')" }
          = User.human_attribute_name(:username)
          %span.glyphicon.glyphicon-chevron-down{ "ng-if" => "sort == '-username'" }
          %span.glyphicon.glyphicon-chevron-up{ "ng-if" => "sort == 'username'" }
      %th
        %a{ "ng-click" => "sortBy('email')" }
          = User.human_attribute_name(:email)
          %span.glyphicon.glyphicon-chevron-down{ "ng-if" => "sort == '-email'" }
          %span.glyphicon.glyphicon-chevron-up{ "ng-if" => "sort == 'email'" }
      %th= User.human_attribute_name(:phone)
      %th= User.human_attribute_name(:alt_phone)
      %th
        %a{ "ng-click" => "sortBy('balance')" }
          = Account.human_attribute_name(:balance)
          %span.glyphicon.glyphicon-chevron-down{ "ng-if" => "sort == '-balance'" }
          %span.glyphicon.glyphicon-chevron-up{ "ng-if" => "sort == 'balance'" }

      %th
        %span.glyphicon.glyphicon-hand-down
        Acciones
  %tbody
    = render partial: "user_rows", locals: {users: @users}


:javascript
  angular.module("timeoverflow").run(function ($rootScope, $location) {
    $rootScope.users = #{ users_as_json };
    $rootScope.sortBy = function(field){
      $rootScope.sort = ($rootScope.sort == field ? ('-' + field): field);
    }
    $rootScope.filterTerm = '';
    $rootScope.$location = $location;
    function locationDelegate(prop) {
      Object.defineProperty($rootScope, prop, {
        get: function () { return $location.search()[prop]; },
        set: function (val) {
          if (val) $location.search(prop, val);
          else $location.search(prop, null);
        }
      });
    }

    locationDelegate('filterTerm');
    locationDelegate('sort');
  })
  angular.module('timeoverflow').filter('timeBalance', function () {
    return function (seconds) {
      if(seconds != 0){
        var minutes = Math.abs(seconds)/60;
        var hours = (minutes/60) >> 0;
        minutes%= 60;
        return (seconds<0)? '-' + hours + ':' + minutes : hours + ':' + minutes
      }else{
        return "â€”";
      }
    };
  })