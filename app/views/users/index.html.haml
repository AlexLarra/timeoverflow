%div{"ng-controller" => "UserListCtrl"}
  %h1
    = User.model_name.human.pluralize
    - if params[:q].present?
      %small
        %span.glyphicon.glyphicon-search
        = params[:q]

  .navbar
    %form.navbar-form.navbar-left
      %input.form-control{type: "text", placeholder: t("global.search"), "ng-model" => "filterTerm"}
    %ul.nav.navbar-nav.pull-right
      - if admin?
        %li
          %a{href: new_user_path}
            %span.glyphicon.glyphicon-plus
            = t "helpers.submit.create", model: User.model_name.human

  %table.table.table-hover.table-condensed.users
    %thead
      %tr
      %tr
        %th
        %th 
          %a{ "ng-click" => "sortBy('id')" }
            ID
            %span.glyphicon.glyphicon-chevron-down{ "ng-if" => "sort == '-id'" }
            %span.glyphicon.glyphicon-chevron-up{ "ng-if" => "sort == 'id'" }
        %th
          %a{ "ng-click" => "sortBy('username')" }
            = User.human_attribute_name(:username)
            %span.glyphicon.glyphicon-chevron-down{ "ng-if" => "sort == '-username'" }
            %span.glyphicon.glyphicon-chevron-up{ "ng-if" => "sort == 'username'" }
        %th
          %a{ "ng-click" => "sortBy('email')" }
            = User.human_attribute_name(:email)
            %span.glyphicon.glyphicon-chevron-down{ "ng-if" => "sort == '-email'" }
            %span.glyphicon.glyphicon-chevron-up{ "ng-if" => "sort == 'email'" }
        %th= User.human_attribute_name(:phone)
        %th= User.human_attribute_name(:alt_phone)
        %th
          %a{ "ng-click" => "sortBy('balance')" }
            = Account.human_attribute_name(:balance)
            %span.glyphicon.glyphicon-chevron-down{ "ng-if" => "sort == '-balance'" }
            %span.glyphicon.glyphicon-chevron-up{ "ng-if" => "sort == 'balance'" }

        %th
          %span.glyphicon.glyphicon-hand-down
          Acciones
    %tbody
      = render partial: "user_rows", locals: {users: @users}

%script{type: "text/ng-template", id: "confirm_toggle_manager.html"}
  .modal-body= t('.manage_warning_angular')
  .modal-footer
    %button.btn.btn-primary{"ng-click" => "$close(true)"} OK
    %button.btn.btn-warning{"ng-click" => "$dismiss()"} NO

%script{type: "text/ng-template", id: "confirm_toggle_active.html"}
  .modal-body= t('.active_warning_angular')
  .modal-footer
    %button.btn.btn-primary{"ng-click" => "$close(true)"} OK
    %button.btn.btn-warning{"ng-click" => "$dismiss()"} NO


:javascript
  angular.module("timeoverflow").run(function ($rootScope, $location, $http, $modal) {
    $rootScope.users = #{ users_as_json };
  });

  angular.module('timeoverflow').controller('UserListCtrl', function ($scope, $modal, $http, $location) {

    $scope.sortBy = function(field){
      $scope.sort = ($scope.sort == field ? ('-' + field): field);
    }
    $scope.filterTerm = '';
    $scope.$location = $location;

    function locationDelegate(prop) {
      Object.defineProperty($scope, prop, {
        get: function () { return $location.search()[prop]; },
        set: function (val) { $location.search(prop, val || null); }
      });
    }

    locationDelegate('filterTerm');
    locationDelegate('sort');

    $scope.toggle_manager = function (user) {
      $modal.open({
        templateUrl: 'confirm_toggle_manager.html',
        size: 'sm',
        scope: $scope,
        controller: function($scope) { $scope.username = user.username; }
      }).result.then(function () {
        $http.put(user.toggle_manager_link);
      }).then(function () {
        user.manager = !user.manager;
      })
    };

    $scope.toggle_active = function (user) {
      $modal.open({
        templateUrl: 'confirm_toggle_active.html',
        size: 'sm',
        scope: $scope,
        controller: function($scope) { $scope.username = user.username; }
      }).result.then(function () {
        $http.put(user.toggle_active_link);
      }).then(function () {
        user.active = !user.active;
      })
    };
  });

  angular.module('timeoverflow').filter('timeBalance', function () {
    return function (seconds) {
      if(seconds != 0){
        var minutes = Math.abs(seconds)/60;
        var hours = (minutes/60) >> 0;
        minutes%= 60;
        return (seconds<0)? '-' + hours + ':' + minutes : hours + ':' + minutes
      }else{
        return "â€”";
      }
    };
  })
